[comment encoding = UTF-8 /]
[module game2java('http://www.Game.game')]


[template public game2java(aJeu : Jeu)]
[comment @main /]
[file (aJeu.name + '.java', false, 'UTF-8')]
package jeuImpl;

import java.util.ArrayList;
import java.util.HashMap;

import jeu.*;

public class [aJeu.name/] {

	public static void main(String['['/]] args) {
		Condition vide = new Condition(new HashMap<>(), new HashMap<>(), new HashMap<>(), new HashMap<>());
		Condition invalid = vide;
		Objet imposs_obj = new Objet("imposs", 1, 1, false, vide, vide);
		HashMap<String, Objet> imposs_requis = new HashMap<>();
		imposs_requis.put("imposs", imposs_obj);
		Condition imposs = new Condition(imposs_requis, new HashMap<>(), new HashMap<>(), new HashMap<>());
		HashMap<String, Lieu> lieux = new HashMap<>();
		HashMap<String, Chemin> chemins = new HashMap<>();
[let places : OrderedSet(Lieu) = aJeu.getLieux()]
[for (lieu : Lieu | places)]
		Lieu [lieu.name/] = new Lieu([lieu.nature.getNature()/], "[lieu.name/]", new HashMap<>(), new HashMap<>());
		lieux.put("[lieu.name/]", [lieu.name/]);
[/for]
[/let]
[let personnes : OrderedSet(Personne) = aJeu.getPersonnes()]
[for (p : Personne | personnes)]
		HashMap<String, Connaissance> [p.name/]_cr_visible = new HashMap<>();
		HashMap<String, Connaissance> [p.name/]_ci_visible = new HashMap<>();
		HashMap<String, Objet> [p.name/]_or_visible = new HashMap<>();
		HashMap<String, Objet> [p.name/]_oi_visible = new HashMap<>();
	[for (personneVisible : ConditionPersonne | p.visible)]
		[personneVisible.getConditionPersonneVisible()/]
	[/for]
		Condition [p.name/]_visible = new Condition([p.name/]_or_visible, [p.name/]_cr_visible, [p.name/]_oi_visible, [p.name/]_ci_visible);
		
		HashMap<String, Connaissance> [p.name/]_cr_active = new HashMap<>();
		HashMap<String, Connaissance> [p.name/]_ci_active = new HashMap<>();
		HashMap<String, Objet> [p.name/]_or_active = new HashMap<>();
		HashMap<String, Objet> [p.name/]_oi_active = new HashMap<>();
	[for (personneActive : ConditionPersonne | p.active)]
		[personneActive.getConditionPersonneActive()/]
	[/for]
		Condition [p.name/]_active = new Condition([p.name/]_or_active, [p.name/]_cr_active, [p.name/]_oi_active, [p.name/]_ci_active);

		Personne [p.name/] = new Personne("[p.name/]", [p.place.name/], [p.name/]_visible, [p.name/]_active, [p.obligatoire/]);
		lieux.get("[p.place.name/]").addPersonne([p.name/]);
	[for (i : Interaction | p.interactions)]
		Interaction [i.name/] = new Interaction("[i.question/]");
		[let n : String = i.name]
		[for (c : Choix | i.choix)]
		ArrayList<Objet> [c.name/]_cons = new ArrayList<>();
			[for (qo : QteObjet | c.objetCons)]
		Objet [c.name/]_[qo.objet.name/] = new Objet("[qo.objet.name/]", [qo.objet.taille/], [qo.qte/], [qo.objet.transformable/], vide, vide);
		[c.name/]_cons.add([c.name/]_[qo.objet.name/]);
			[/for]
		ArrayList<Avantage> [c.name/]_don = new ArrayList<>();
			[for (qo : QteObjet | c.objetDon)]
		Objet [c.name/]_[qo.objet.name/] = new Objet("[qo.objet.name/]", [qo.objet.taille/], [qo.qte/], [qo.objet.transformable/], vide, vide);
		[c.name/]_don.add([c.name/]_[qo.objet.name/]);
			[/for]
			[for (con : Connaissance | c.connaisDon)]
		Connaissance [c.name/]_[con.name/] = new Connaissance("[con.name/]", vide, vide);
		[c.name/]_don.add([c.name/]_[con.name/]);
			[/for]
		Choix [c.name/]_[n/] = new Choix("[c.name/]", "[c.reponse/]", [c.name/]_cons, [c.name/]_don, [c.bonne/]);
		[n/].addChoix([c.name/]_[n/]);
		[/for]
		[/let]
		[p.name/].addInteraction([i.name/]);
	[/for]
[/for]
[/let]
[let chemins : OrderedSet(Chemin) = aJeu.getChemins()]
[for (ch : Chemin | chemins)]
		HashMap<String, Connaissance> [ch.name/]_cr_visible = new HashMap<>();
		HashMap<String, Connaissance> [ch.name/]_ci_visible = new HashMap<>();
		HashMap<String, Objet> [ch.name/]_or_visible = new HashMap<>();
		HashMap<String, Objet> [ch.name/]_oi_visible = new HashMap<>();
	[for (cheminVisible : ConditionChemin | ch.visible)]
		[cheminVisible.getConditionCheminVisible()/]
	[/for]
		Condition [ch.name/]_visible = new Condition([ch.name/]_or_visible, [ch.name/]_cr_visible, [ch.name/]_oi_visible, [ch.name/]_ci_visible);
		
		HashMap<String, Connaissance> [ch.name/]_cr_ouvert = new HashMap<>();
		HashMap<String, Connaissance> [ch.name/]_ci_ouvert = new HashMap<>();
		HashMap<String, Objet> [ch.name/]_or_ouvert = new HashMap<>();
		HashMap<String, Objet> [ch.name/]_oi_ouvert = new HashMap<>();
	[for (cheminOuvert : ConditionChemin | ch.ouvert)]
		[cheminOuvert.getConditionCheminOuvert()/]
	[/for]
		Condition [ch.name/]_ouvert = new Condition([ch.name/]_or_ouvert, [ch.name/]_cr_ouvert, [ch.name/]_oi_ouvert, [ch.name/]_ci_ouvert);

		Chemin [ch.name/] = new Chemin("[ch.name/]", [ch.pred.name/], [ch.succ.name/], [ch.name/]_visible, [ch.obligatoire/], [ch.name/]_ouvert);
		chemins.put("[ch.name/]", [ch.name/]);
		lieux.get("[ch.pred.name/]").addChemin([ch.name/]);
[/for]
[/let]
		Territoire terrain = new Territoire(lieux, chemins);
[let expl : Explorateur = aJeu.explorateur]
		HashMap<String, Objet> objetsExpl = new HashMap<>();
[for (o : Objet | expl.objets)]
		Objet [o.name/]_expl = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
		objetsExpl.put("[o.name/]",[o.name/]_expl);
[/for]
		HashMap<String, Connaissance> connaisExpl = new HashMap<>();
[for (c : Connaissance | expl.connaissances)]
		Connaissance [c.name/]_expl = new Connaissance("[c.name/]", vide, vide);
		connaisExpl.put("[c.name/]",[c.name/]_expl);
[/for]
		Explorateur explorateur = new Explorateur([expl.place.name/], [expl.tailleDispo/], objetsExpl, connaisExpl);
[/let]
		Jeu [aJeu.name/] = new Jeu(terrain, explorateur);
		[aJeu.name/].jouer();
	}

}

[/file]
[/template]

[query public getLieux(j: Jeu) : OrderedSet(Lieu) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Lieu))
		->collect(e | e.oclAsType(Lieu))
		->asOrderedSet()
/]

[query public getChemins(j: Jeu) : OrderedSet(Chemin) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Chemin))
		->collect(e | e.oclAsType(Chemin))
		->asOrderedSet()
/]

[query public getPersonnes(j: Jeu) : OrderedSet(Personne) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Personne))
		->collect(e | e.oclAsType(Personne))
		->asOrderedSet()
/]

[query public getNature(n: Nature) : String =
	if n = Nature::depart then
		'Nature.DEPART'
    else if n = Nature::fin then
		'Nature.ARRIVEE'
	else
		'Nature.INTERMEDIAIRE'
	endif
	endif
/]


[template private getConditionPersonneVisible(c : ConditionPersonne)]
[if (not c.connaissanceRequise.oclIsUndefined())]
Connaissance [c.connaissanceRequise.name/]_[c.name/] = new Connaissance("[c.connaissanceRequise.name/]", vide, vide);
[c.visible.name/]_cr_visible.put("[c.connaissanceRequise.name/]", [c.connaissanceRequise.name/]_[c.name/]);
[/if]
[if (not c.connaissanceInterdite.oclIsUndefined())]
Connaissance [c.connaissanceInterdite.name/]_[c.name/] = new Connaissance("[c.connaissanceInterdite.name/]", vide, vide);
[c.visible.name/]_ci_visible.put("[c.connaissanceInterdite.name/]", [c.connaissanceInterdite.name/]_[c.name/]);
[/if]
[if (not c.objetRequis.oclIsUndefined())]
Objet [c.objetRequis.objet.name/]_[c.name/] = new Objet("[c.objetRequis.objet.name/]", [c.objetRequis.objet.taille/], [c.objetRequis.qte/], [c.objetRequis.objet.transformable/], vide, vide);
[c.visible.name/]_or_visible.put("[c.objetRequis.objet.name/]", [c.objetRequis.objet.name/]_[c.name/]);
[/if]
[if (not c.objetInterdit.oclIsUndefined())]
Objet [c.objetInterdit.objet.name/]_[c.name/] = new Objet("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.taille/], [c.objetInterdit.qte/], [c.objetRequis.objet.transformable/], vide, vide);
[c.visible.name/]_oi_visible.put("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.name/]_[c.name/]);
[/if]
[/template]


[template private getConditionPersonneActive(c : ConditionPersonne)]
[if (not c.connaissanceRequise.oclIsUndefined())]
Connaissance [c.connaissanceRequise.name/]_[c.name/] = new Connaissance("[c.connaissanceRequise.name/]", vide, vide);
[c.active.name/]_cr_active.put("[c.connaissanceRequise.name/]", [c.connaissanceRequise.name/]_[c.name/]);
[/if]
[if (not c.connaissanceInterdite.oclIsUndefined())]
Connaissance [c.connaissanceInterdite.name/]_[c.name/] = new Connaissance("[c.connaissanceInterdite.name/]", vide, vide);
[c.active.name/]_ci_active.put("[c.connaissanceInterdite.name/]", [c.connaissanceInterdite.name/]_[c.name/]);
[/if]
[if (not c.objetRequis.oclIsUndefined())]
Objet [c.objetRequis.objet.name/]_[c.name/] = new Objet("[c.objetRequis.objet.name/]", [c.objetRequis.objet.taille/], [c.objetRequis.qte/], [c.objetRequis.objet.transformable/], vide, vide);
[c.active.name/]_or_active.put("[c.objetRequis.objet.name/]", [c.objetRequis.objet.name/]_[c.name/]);
[/if]
[if (not c.objetInterdit.oclIsUndefined())]
Objet [c.objetInterdit.objet.name/]_[c.name/] = new Objet("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.taille/], [c.objetInterdit.qte/], [c.objetRequis.objet.transformable/], vide, vide);
[c.active.name/]_oi_active.put("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.name/]_[c.name/]);
[/if]
[/template]


[template private getConditionCheminVisible(c : ConditionChemin)]
[if (not c.connaissanceRequise.oclIsUndefined())]
Connaissance [c.connaissanceRequise.name/]_[c.name/] = new Connaissance("[c.connaissanceRequise.name/]", vide, vide);
[c.visible.name/]_cr_visible.put("[c.connaissanceRequise.name/]", [c.connaissanceRequise.name/]_[c.name/]);
[/if]
[if (not c.connaissanceInterdite.oclIsUndefined())]
Connaissance [c.connaissanceInterdite.name/]_[c.name/] = new Connaissance("[c.connaissanceInterdite.name/]", vide, vide);
[c.visible.name/]_ci_visible.put("[c.connaissanceInterdite.name/]", [c.connaissanceInterdite.name/]_[c.name/]);
[/if]
[if (not c.objetRequis.oclIsUndefined())]
Objet [c.objetRequis.objet.name/]_[c.name/] = new Objet("[c.objetRequis.objet.name/]", [c.objetRequis.objet.taille/], [c.objetRequis.qte/], false, vide, vide);
[c.visible.name/]_or_visible.put("[c.objetRequis.objet.name/]", [c.objetRequis.objet.name/]_[c.name/]);
[/if]
[if (not c.objetInterdit.oclIsUndefined())]
Objet [c.objetInterdit.objet.name/]_[c.name/] = new Objet("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.taille/], [c.objetInterdit.qte/], false, vide, vide);
[c.visible.name/]_oi_visible.put("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.name/]_[c.name/]);
[/if]
[/template]


[template private getConditionCheminOuvert(c : ConditionChemin)]
[if (not c.connaissanceRequise.oclIsUndefined())]
Connaissance [c.connaissanceRequise.name/]_[c.name/] = new Connaissance("[c.connaissanceRequise.name/]", vide, vide);
[c.ouvert.name/]_cr_ouvert.put("[c.connaissanceRequise.name/]", [c.connaissanceRequise.name/]_[c.name/]);
[/if]
[if (not c.connaissanceInterdite.oclIsUndefined())]
Connaissance [c.connaissanceInterdite.name/]_[c.name/] = new Connaissance("[c.connaissanceInterdite.name/]", vide, vide);
[c.ouvert.name/]_ci_ouvert.put("[c.connaissanceInterdite.name/]", [c.connaissanceInterdite.name/]_[c.name/]);
[/if]
[if (not c.objetRequis.oclIsUndefined())]
Objet [c.objetRequis.objet.name/]_[c.name/] = new Objet("[c.objetRequis.objet.name/]", [c.objetRequis.objet.taille/], [c.objetRequis.qte/], false, vide, vide);
[c.ouvert.name/]_or_ouvert.put("[c.objetRequis.objet.name/]", [c.objetRequis.objet.name/]_[c.name/]);
[/if]
[if (not c.objetInterdit.oclIsUndefined())]
Objet [c.objetInterdit.objet.name/]_[c.name/] = new Objet("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.taille/], [c.objetInterdit.qte/], false, vide, vide);
[c.ouvert.name/]_oi_ouvert.put("[c.objetInterdit.objet.name/]", [c.objetInterdit.objet.name/]_[c.name/]);
[/if]
[/template]
