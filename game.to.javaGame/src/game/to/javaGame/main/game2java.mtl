[comment encoding = UTF-8 /]
[module game2java('http://www.Game.game')]


[template public game2java(aJeu : Jeu)]
[comment @main /]
[file (aJeu.name + '.java', false, 'UTF-8')]
package jeuImpl;

import java.util.ArrayList;
import java.util.HashMap;

import jeu.*;

public class [aJeu.name/] {

	public static void main(String['['/]] args) {
		Condition vide = new Condition(new HashMap<>(), new HashMap<>(), new HashMap<>(), new HashMap<>());
		Condition invalid = vide;
		Objet imposs_obj = new Objet("imposs", 1, 1, false, vide, vide);
		HashMap<String, Objet> imposs_requis = new HashMap<>();
		imposs_requis.put("imposs", imposs_obj);
		Condition imposs = new Condition(imposs_requis, new HashMap<>(), new HashMap<>(), new HashMap<>());
		HashMap<String, Lieu> lieux = new HashMap<>();
		HashMap<String, Chemin> chemins = new HashMap<>();
[let places : OrderedSet(Lieu) = aJeu.getLieux()]
[for (lieu : Lieu | places)]
		Lieu [lieu.name/] = new Lieu([lieu.nature.getNature()/], "[lieu.name/]", new HashMap<>(), new HashMap<>());
		lieux.put("[lieu.name/]", [lieu.name/]);
[/for]
[/let]
[let personnes : OrderedSet(Personne) = aJeu.getPersonnes()]
[for (p : Personne | personnes)]
		[p.visible.getCondition()/]
		[p.actif.getCondition()/]
		Personne [p.name/] = new Personne("[p.name/]", [p.place.name/], [p.visible.name/], [p.actif.name/], [p.obligatoire/]);
		lieux.get("[p.place.name/]").addPersonne([p.name/]);
	[for (i : Interaction | p.interactions)]
		Interaction [i.name/] = new Interaction("[i.question/]");
		[let n : String = i.name]
		[for (c : Choix | i.choix)]
		ArrayList<Objet> [c.name/]_cons = new ArrayList<>();
			[for (qo : QteObjet | c.objetCons)]
		[qo.objet.visible.getCondition()/]
		[qo.objet.actif.getCondition()/]
		Objet [c.name/]_[qo.objet.name/] = new Objet("[qo.objet.name/]", [qo.objet.taille/], [qo.qte/], [qo.objet.transformable/], [qo.objet.visible.name/], [qo.objet.actif.name/]);
		[c.name/]_cons.add([c.name/]_[qo.objet.name/]);
			[/for]
		ArrayList<Avantage> [c.name/]_don = new ArrayList<>();
			[for (qo : QteObjet | c.objetDon)]
		[qo.objet.visible.getCondition()/]
		[qo.objet.actif.getCondition()/]
		Objet [c.name/]_[qo.objet.name/] = new Objet("[qo.objet.name/]", [qo.objet.taille/], [qo.qte/], [qo.objet.transformable/], [qo.objet.visible.name/], [qo.objet.actif.name/]);
		[c.name/]_don.add([c.name/]_[qo.objet.name/]);
			[/for]
			[for (con : Connaissance | c.connaisDon)]
		[con.visible.getCondition()/]
		[con.actif.getCondition()/]
		Connaissance [c.name/]_[con.name/] = new Connaissance("[con.name/]", [con.visible.name/], [con.actif.name/]);
		[c.name/]_don.add([c.name/]_[con.name/]);
			[/for]
		Choix [c.name/]_[n/] = new Choix("[c.name/]", "[c.reponse/]", [c.name/]_cons, [c.name/]_don, [c.bonne/]);
		[n/].addChoix([c.name/]_[n/]);
		[/for]
		[/let]
		[p.name/].addInteraction([i.name/]);
	[/for]
[/for]
[/let]
[let chemins : OrderedSet(Chemin) = aJeu.getChemins()]
[for (ch : Chemin | chemins)]
		[ch.visible.getCondition()/]
		[ch.ouvert.getCondition()/]
		Chemin [ch.name/] = new Chemin("[ch.name/]", [ch.pred.name/], [ch.succ.name/], [ch.visible.name/], [ch.obligatoire/], [ch.ouvert.name/]);
		chemins.put("[ch.name/]", [ch.name/]);
		lieux.get("[ch.pred.name/]").addChemin([ch.name/]);
[/for]
[/let]
		Territoire terrain = new Territoire(lieux, chemins);
[let expl : Explorateur = aJeu.explorateur]
		HashMap<String, Objet> objetsExpl = new HashMap<>();
[for (o : Objet | expl.objets)]
		[o.visible.getCondition()/]
		[o.actif.getCondition()/]
		Objet [o.name/]_expl = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], [o.visible.name/], [o.actif.name/]);
		objetsExpl.put("[o.name/]",[o.name/]_expl);
[/for]
		HashMap<String, Connaissance> connaisExpl = new HashMap<>();
[for (c : Connaissance | expl.connaissances)]
		[c.visible.getCondition()/]
		[c.actif.getCondition()/]
		Connaissance [c.name/]_expl = new Connaissance("[c.name/]", [c.visible.name/], [c.actif.name/]);
		connaisExpl.put("[c.name/]",[c.name/]_expl);
[/for]
		Explorateur explorateur = new Explorateur([expl.place.name/], [expl.tailleDispo/], objetsExpl, connaisExpl);
[/let]
		Jeu [aJeu.name/] = new Jeu(terrain, explorateur);
		[aJeu.name/].jouer();
	}

}

[/file]
[/template]

[query public getLieux(j: Jeu) : OrderedSet(Lieu) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Lieu))
		->collect(e | e.oclAsType(Lieu))
		->asOrderedSet()
/]

[query public getChemins(j: Jeu) : OrderedSet(Chemin) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Chemin))
		->collect(e | e.oclAsType(Chemin))
		->asOrderedSet()
/]

[query public getPersonnes(j: Jeu) : OrderedSet(Personne) =
	j.elementsjeu->select(e | e.oclIsTypeOf(Personne))
		->collect(e | e.oclAsType(Personne))
		->asOrderedSet()
/]

[query public getNature(n: Nature) : String =
	if n = Nature::depart then
		'Nature.DEPART'
    else if n = Nature::fin then
		'Nature.ARRIVEE'
	else
		'Nature.INTERMEDIAIRE'
	endif
	endif
/]

[template private getCondition(cond : Condition)]
[if (cond = null)]
[elseif (cond = true)]
Condition [cond.name/] = vide;
[elseif (cond = false)]
Condition [cond.name/] = imposs;
[else]
//template
	[if ((cond.connaissancesRequises->size()).oclIsUndefined() = true)]
		[if ((cond.connaissancesInterdites->size()).oclIsUndefined() = true)]
			[if ((cond.objetsRequis->size()).oclIsUndefined() = true)]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = false)]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition(new HashMap<>(), new HashMap<>(), [cond.name/]_oi, new HashMap<>());
				[/if]
			[else]
HashMap<String, Objet> [cond.name/]_or = new HashMap<>();
				[for (o : Objet | cond.objetsRequis)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_or.put("[o.name/]", [cond.name/]_[o.name/]);
				[/for]
				[if (cond.objetsInterdits->size() = 0)]
Condition [cond.name/] = new Condition([cond.name/]_or, new HashMap<>(), new HashMap<>(), new HashMap<>());
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition([cond.name/]_or, new HashMap<>(), [cond.name/]_oi, new HashMap<>());
				[/if]
			[/if]
		[else]
HashMap<String, Connaissance> [cond.name/]_ci = new HashMap<>();
			[for (c : Connaissance | cond.connaissancesInterdites)]
Connaissance [cond.name/]_[c.name/] = new Connaissance("[c.name/]", [c.visible.name/], [c.actif.name/]);
[cond.name/]_ci.put("[c.name/]", [cond.name/]_[c.name/]);
			[/for]
			[if ((cond.objetsRequis->size()).oclIsUndefined() = true)]
				[if (cond.objetsInterdits->size() = 0)]
Condition [cond.name/] = new Condition(new HashMap<>(), new HashMap<>(), new HashMap<>(), [cond.name/]_ci);
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition(new HashMap<>(), new HashMap<>(), [cond.name/]_oi, [cond.name/]_ci);
				[/if]
			[else]
HashMap<String, Objet> [cond.name/]_or = new HashMap<>();
				[for (o : Objet | cond.objetsRequis)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_or.put("[o.name/]", [cond.name/]_[o.name/]);
				[/for]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = true)]
Condition [cond.name/] = new Condition([cond.name/]_or, new HashMap<>(), new HashMap<>(), [cond.name/]_ci);
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition([cond.name/]_or, new HashMap<>(), [cond.name/]_oi, [cond.name/]_ci);
				[/if]
			[/if]
		[/if]
	[else]
HashMap<String, Connaissance> [cond.name/]_cr = new HashMap<>();
		[for (c : Connaissance | cond.connaissancesRequises)]
Connaissance [cond.name/]_[c.name/] = new Connaissance("[c.name/]", [c.visible.name/], [c.actif.name/]);
[cond.name/]_cr.put("[c.name/]", [cond.name/]_[c.name/]);
		[/for]
		[if ((cond.connaissancesInterdites->size()).oclIsUndefined() = true)]
			[if ((cond.objetsRequis->size()).oclIsUndefined() = true)]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = true)]
Condition [cond.name/] = new Condition(new HashMap<>(), [cond.name/]_cr, new HashMap<>(), new HashMap<>());
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition(new HashMap<>(), [cond.name/]_cr, [cond.name/]_oi, new HashMap<>());
				[/if]
			[else]
HashMap<String, Objet> [cond.name/]_or = new HashMap<>();
				[for (o : Objet | cond.objetsRequis)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_or.put("[o.name/]", [cond.name/]_[o.name/]);
				[/for]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = true)]
Condition [cond.name/] = new Condition([cond.name/]_or, [cond.name/]_cr, new HashMap<>(), new HashMap<>());
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition([cond.name/]_or, [cond.name/]_cr, [cond.name/]_oi, new HashMap<>());
				[/if]
			[/if]
		[else]
HashMap<String, Connaissance> [cond.name/]_ci = new HashMap<>();
			[for (c : Connaissance | cond.connaissancesInterdites)]
Connaissance [cond.name/]_[c.name/] = new Connaissance("[c.name/]", [c.visible.name/], [c.actif.name/]);
[cond.name/]_ci.put("[c.name/]", [cond.name/]_[c.name/]);
			[/for]
			[if (cond.objetsRequis->size() = 0)]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = true)]
Condition [cond.name/] = new Condition(new HashMap<>(), [cond.name/]_cr, new HashMap<>(), [cond.name/]_ci);
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition(new HashMap<>(), [cond.name/]_cr, [cond.name/]_oi, [cond.name/]_ci);
				[/if]
			[else]
HashMap<String, Objet> [cond.name/]_or = new HashMap<>();
				[for (o : Objet | cond.objetsRequis)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_or.put("[o.name/]", [cond.name/]_[o.name/]);
				[/for]
				[if ((cond.objetsInterdits->size()).oclIsUndefined() = true)]
Condition [cond.name/] = new Condition([cond.name/]_or, [cond.name/]_cr, new HashMap<>(), [cond.name/]_ci);
				[else]
HashMap<String, Objet> [cond.name/]_oi = new HashMap<>();
					[for (o : Objet | cond.objetsInterdits)]
Objet [cond.name/]_[o.name/] = new Objet("[o.name/]", [o.taille/], [o.qte/], [o.transformable/], vide, vide);
[cond.name/]_oi.put("[o.name/]", [cond.name/]_[o.name/]);
					[/for]
Condition [cond.name/] = new Condition([cond.name/]_or, [cond.name/]_cr, [cond.name/]_oi, [cond.name/]_ci);
				[/if]
			[/if]
		[/if]
	[/if]	
[/if]
//end template
[/template]
