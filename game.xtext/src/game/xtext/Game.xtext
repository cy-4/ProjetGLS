// automatically generated by Xtext
grammar game.xtext.Game with org.eclipse.xtext.common.Terminals

import "http://www.Game.game" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Jeu returns Jeu:
	{Jeu}
	'Jeu'
	name = ID '{'
	territoire = Territoire
	explorateur = Explorateur
	elementsjeu += ElementsJeu ( "," elementsjeu+=ElementsJeu)*  
	'}';
		
enum Nature returns Nature:
				depart = 'depart' | fin = 'fin' | inter = 'inter';

ElementsJeu returns ElementsJeu:
	 Place | QteObjet | Personne | Connaissance | Objet | Interaction | Choix |  ConditionPersonne | ConditionAvantage | ConditionChemin;

Place returns Place:
	  Lieu | Chemin;
	  

Territoire returns Territoire:
	{Territoire}
	'Territoire' 
	'{'
		'places'  places+=Place ( "," places+=Place)* 
	'}';

Explorateur returns Explorateur:
	{Explorateur}
	'Explorateur'
	'{'
		'taille' tailleDispo=EInt
		'localisation' place=[Place]
		('objets'  objets+=Objet ( "," objets+=Objet)*  )?
		('connaissances'  connaissances+=Connaissance ( "," connaissances+=Connaissance)*  )?
	'}';



Lieu returns Lieu:
	{Lieu}
	'Lieu'
	name=ID
	'{'
		'nature' nature=Nature
		('personnes' personnes+=[Personne] ( "," personnes+=[Personne])*  )?
	'}';

Chemin returns Chemin:
	{Chemin}
	(obligatoire?='obligatoire')?
	'Chemin'
	name=ID
	'{'
		'pred' pred=[Lieu]
		'succ' succ=[Lieu]
		('visible' visible+=ConditionChemin ( "," visible+=ConditionChemin)* )?
		('ouvert' ouvert+=ConditionChemin ( "," ouvert+=ConditionChemin)* )?
	'}';



Personne returns Personne:
	(obligatoire?='obligatoire')?
	'Personne'
	name=ID
	'{'
		'place' place=[Lieu]
		'interactions' interactions+=[Interaction] ( "," interactions+=[Interaction])*  
		('visible' visible+=ConditionPersonne ( "," visible+=ConditionPersonne)* )?
		('active' active+=ConditionPersonne ( "," active+=ConditionPersonne)* )?
	'}';

ConditionPersonne returns ConditionPersonne:
	{ConditionPersonne}
	'ConditionPersonne'
	name=ID
	'{'
		('connaissanceRequise' connaissanceRequise=[Connaissance])?
		('connaissanceInterdite' connaissanceInterdite=[Connaissance])?
		('objetRequis' objetRequis=[QteObjet])?
		('objetInterdit' objetInterdit=[QteObjet])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Interaction returns Interaction:
	'Interaction'
	name=ID
	'{'
		('question' question=STRING)?
		'personne' personne=[Personne]
		('choix' choix+=[Choix] ( "," choix+=[Choix])* )?
	'}';

Connaissance returns Connaissance:
	{Connaissance}
	'Connaissance'
	name=ID
	'{'
		('choix' choix=[Choix])?
		('visible' visible+=ConditionAvantage ( "," visible+=ConditionAvantage)* )?
		('actif' actif+=ConditionAvantage ( "," actif+=ConditionAvantage)* )?
	'}';

Objet returns Objet:
	{Objet}
	(transformable?='transformable')?
	'Objet'
	name=ID
	'{'
		('qte' qte=EInt)?
		('taille' taille=EInt)?
		('visible' visible+=ConditionAvantage ( "," visible+=ConditionAvantage)* )?
		('actif' actif+=ConditionAvantage ( "," actif+=ConditionAvantage)* )?
	'}';

ConditionAvantage returns ConditionAvantage:
	{ConditionAvantage}
	'ConditionAvantage'
	name=ID
	'{'
		('connaissanceRequise' connaissanceRequise=[Connaissance])?
		('connaissanceInterdite' connaissanceInterdite=[Connaissance])?
		('objetRequis' objetRequis=[QteObjet])?
		('objetInterdit' objetInterdit=[QteObjet])?
	'}';

Choix returns Choix:
	(bonne?='bonne')?
	'Choix'
	name=ID
	'{'
		('reponse' reponse=STRING)?
		('connaisDon' connaisDon+=[Connaissance] ( "," connaisDon+=[Connaissance])* )?
		'interaction' interaction=[Interaction]
		('objetCons' objetCons+=QteObjet ( "," objetCons+=QteObjet)* )?
		('objetDon' objetDon+=QteObjet ( "," objetDon+=QteObjet)* )?
	'}';

QteObjet returns QteObjet:
	{QteObjet}
	'QteObjet'
	name=ID
	'{'
		('qte' qte=EInt)?
		('objet' objet=[Objet])?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

ConditionChemin returns ConditionChemin:
	{ConditionChemin}
	'ConditionChemin'
	name=ID
	'{'
		('connaissanceRequise' connaissanceRequise=[Connaissance])?
		('connaissanceInterdite' connaissanceInterdite=[Connaissance])?
		('objetRequis' objetRequis=[QteObjet])?
		('objetInterdit' objetInterdit=[QteObjet])?
	'}';
