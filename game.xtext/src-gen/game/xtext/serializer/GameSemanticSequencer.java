/*
 * generated by Xtext 2.23.0
 */
package game.xtext.serializer;

import com.google.inject.Inject;
import game.game.Chemin;
import game.game.Choix;
import game.game.ConditionAvantage;
import game.game.ConditionChemin;
import game.game.ConditionPersonne;
import game.game.Connaissance;
import game.game.Explorateur;
import game.game.GamePackage;
import game.game.Interaction;
import game.game.Jeu;
import game.game.Lieu;
import game.game.Objet;
import game.game.Personne;
import game.game.QteObjet;
import game.game.Territoire;
import game.xtext.services.GameGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GamePackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GamePackage.CONDITION_AVANTAGE:
				sequence_ConditionAvantage(context, (ConditionAvantage) semanticObject); 
				return; 
			case GamePackage.CONDITION_CHEMIN:
				sequence_ConditionChemin(context, (ConditionChemin) semanticObject); 
				return; 
			case GamePackage.CONDITION_PERSONNE:
				sequence_ConditionPersonne(context, (ConditionPersonne) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GamePackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GamePackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GamePackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case GamePackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GamePackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case GamePackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case GamePackage.QTE_OBJET:
				sequence_QteObjet(context, (QteObjet) semanticObject); 
				return; 
			case GamePackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Chemin
	 *     Place returns Chemin
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         obligatoire?='obligatoire'? 
	 *         name=ID 
	 *         pred=[Lieu|ID] 
	 *         succ=[Lieu|ID] 
	 *         (visible+=ConditionChemin visible+=ConditionChemin*)? 
	 *         (ouvert+=ConditionChemin ouvert+=ConditionChemin*)?
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Choix
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (
	 *         bonne?='bonne'? 
	 *         name=ID 
	 *         reponse=STRING? 
	 *         (connaisDon+=[Connaissance|ID] connaisDon+=[Connaissance|ID]*)? 
	 *         interaction=[Interaction|ID] 
	 *         (objetCons+=QteObjet objetCons+=QteObjet*)? 
	 *         (objetDon+=QteObjet objetDon+=QteObjet*)?
	 *     )
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns ConditionAvantage
	 *     ConditionAvantage returns ConditionAvantage
	 *
	 * Constraint:
	 *     (name=ID connaissanceRequise=[Connaissance|ID]? connaissanceInterdite=[Connaissance|ID]? objetRequis=[QteObjet|ID]? objetInterdit=[QteObjet|ID]?)
	 */
	protected void sequence_ConditionAvantage(ISerializationContext context, ConditionAvantage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns ConditionChemin
	 *     ConditionChemin returns ConditionChemin
	 *
	 * Constraint:
	 *     (name=ID connaissanceRequise=[Connaissance|ID]? connaissanceInterdite=[Connaissance|ID]? objetRequis=[QteObjet|ID]? objetInterdit=[QteObjet|ID]?)
	 */
	protected void sequence_ConditionChemin(ISerializationContext context, ConditionChemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns ConditionPersonne
	 *     ConditionPersonne returns ConditionPersonne
	 *
	 * Constraint:
	 *     (name=ID connaissanceRequise=[Connaissance|ID]? connaissanceInterdite=[Connaissance|ID]? objetRequis=[QteObjet|ID]? objetInterdit=[QteObjet|ID]?)
	 */
	protected void sequence_ConditionPersonne(ISerializationContext context, ConditionPersonne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Connaissance
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID choix=[Choix|ID]? (visible+=ConditionAvantage visible+=ConditionAvantage*)? (actif+=ConditionAvantage actif+=ConditionAvantage*)?)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (tailleDispo=EInt place=[Place|ID] (objets+=Objet objets+=Objet*)? (connaissances+=Connaissance connaissances+=Connaissance*)?)
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Interaction
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID question=STRING? personne=[Personne|ID] (choix+=[Choix|ID] choix+=[Choix|ID]*)?)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (name=ID territoire=Territoire explorateur=Explorateur elementsjeu+=ElementsJeu elementsjeu+=ElementsJeu*)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Lieu
	 *     Place returns Lieu
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (name=ID nature=Nature (personnes+=[Personne|ID] personnes+=[Personne|ID]*)?)
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Objet
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (
	 *         transformable?='transformable'? 
	 *         name=ID 
	 *         qte=EInt? 
	 *         taille=EInt? 
	 *         (visible+=ConditionAvantage visible+=ConditionAvantage*)? 
	 *         (actif+=ConditionAvantage actif+=ConditionAvantage*)?
	 *     )
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Personne
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (
	 *         obligatoire?='obligatoire'? 
	 *         name=ID 
	 *         place=[Lieu|ID] 
	 *         interactions+=[Interaction|ID] 
	 *         interactions+=[Interaction|ID]* 
	 *         (visible+=ConditionPersonne visible+=ConditionPersonne*)? 
	 *         (active+=ConditionPersonne active+=ConditionPersonne*)?
	 *     )
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns QteObjet
	 *     QteObjet returns QteObjet
	 *
	 * Constraint:
	 *     (name=ID qte=EInt? objet=[Objet|ID]?)
	 */
	protected void sequence_QteObjet(ISerializationContext context, QteObjet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (places+=Place places+=Place*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
