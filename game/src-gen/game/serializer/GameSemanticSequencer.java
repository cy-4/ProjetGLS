/*
 * generated by Xtext 2.23.0
 */
package game.serializer;

import com.google.inject.Inject;
import game.game.Chemin;
import game.game.Choix;
import game.game.Condition;
import game.game.Connaissance;
import game.game.Explorateur;
import game.game.GamePackage;
import game.game.Interaction;
import game.game.Jeu;
import game.game.Lieu;
import game.game.Objet;
import game.game.Personne;
import game.game.Recompense;
import game.game.Territoire;
import game.services.GameGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GamePackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GamePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GamePackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GamePackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GamePackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case GamePackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GamePackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case GamePackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case GamePackage.RECOMPENSE:
				sequence_Recompense(context, (Recompense) semanticObject); 
				return; 
			case GamePackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Chemin
	 *     Place returns Chemin
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (pred=[Lieu|ID] succ=[Lieu|ID] visible=BOOL obligatoire=BOOL ouvert=BOOL)
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHEMIN__PRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHEMIN__PRED));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHEMIN__SUCC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHEMIN__SUCC));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHEMIN__VISIBLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHEMIN__VISIBLE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHEMIN__OBLIGATOIRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHEMIN__OBLIGATOIRE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHEMIN__OUVERT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHEMIN__OUVERT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheminAccess().getPredLieuIDTerminalRuleCall_3_0_1(), semanticObject.eGet(GamePackage.Literals.CHEMIN__PRED, false));
		feeder.accept(grammarAccess.getCheminAccess().getSuccLieuIDTerminalRuleCall_5_0_1(), semanticObject.eGet(GamePackage.Literals.CHEMIN__SUCC, false));
		feeder.accept(grammarAccess.getCheminAccess().getVisibleBOOLTerminalRuleCall_7_0(), semanticObject.isVisible());
		feeder.accept(grammarAccess.getCheminAccess().getObligatoireBOOLTerminalRuleCall_9_0(), semanticObject.isObligatoire());
		feeder.accept(grammarAccess.getCheminAccess().getOuvertBOOLTerminalRuleCall_11_0(), semanticObject.isOuvert());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (numero=INT reponse=STRING recompense=Recompense)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHOIX__NUMERO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHOIX__NUMERO));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHOIX__REPONSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHOIX__REPONSE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CHOIX__RECOMPENSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CHOIX__RECOMPENSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChoixAccess().getNumeroINTTerminalRuleCall_1_0(), semanticObject.getNumero());
		feeder.accept(grammarAccess.getChoixAccess().getReponseSTRINGTerminalRuleCall_4_0(), semanticObject.getReponse());
		feeder.accept(grammarAccess.getChoixAccess().getRecompenseRecompenseParserRuleCall_6_0(), semanticObject.getRecompense());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (connaissancesRequises+=Connaissance* objetsRequis+=Objet*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Connaissance
	 *     Avantage returns Connaissance
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (visible=BOOL actif=BOOL)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.AVANTAGE__VISIBLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.AVANTAGE__VISIBLE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.AVANTAGE__ACTIF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.AVANTAGE__ACTIF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnaissanceAccess().getVisibleBOOLTerminalRuleCall_3_0(), semanticObject.isVisible());
		feeder.accept(grammarAccess.getConnaissanceAccess().getActifBOOLTerminalRuleCall_5_0(), semanticObject.isActif());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (place=Place tailleDispo=INT objets=Objet* connaissances=Connaissance*)
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (question=STRING choix+=Choix+)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (nom=ID territoire=Territoire explorateur=Explorateur elementsjeu+=ElementsJeu*)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Lieu
	 *     Place returns Lieu
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (nom=ID nature=Nature)
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.LIEU__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.LIEU__NOM));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.LIEU__NATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.LIEU__NATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLieuAccess().getNomIDTerminalRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getLieuAccess().getNatureNatureEnumRuleCall_3_0(), semanticObject.getNature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Objet
	 *     Avantage returns Objet
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (visible=BOOL actif=BOOL qte=INT taille=INT transformable=BOOL)
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.AVANTAGE__VISIBLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.AVANTAGE__VISIBLE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.AVANTAGE__ACTIF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.AVANTAGE__ACTIF));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.OBJET__QTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.OBJET__QTE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.OBJET__TAILLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.OBJET__TAILLE));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.OBJET__TRANSFORMABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.OBJET__TRANSFORMABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjetAccess().getVisibleBOOLTerminalRuleCall_3_0(), semanticObject.isVisible());
		feeder.accept(grammarAccess.getObjetAccess().getActifBOOLTerminalRuleCall_5_0(), semanticObject.isActif());
		feeder.accept(grammarAccess.getObjetAccess().getQteINTTerminalRuleCall_7_0(), semanticObject.getQte());
		feeder.accept(grammarAccess.getObjetAccess().getTailleINTTerminalRuleCall_9_0(), semanticObject.getTaille());
		feeder.accept(grammarAccess.getObjetAccess().getTransformableBOOLTerminalRuleCall_11_0(), semanticObject.isTransformable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementsJeu returns Personne
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (nom=ID visible=BOOL actif=BOOL obligatoire=BOOL interactions+=Interaction*)
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Recompense returns Recompense
	 *
	 * Constraint:
	 *     avantage+=Avantage+
	 */
	protected void sequence_Recompense(ISerializationContext context, Recompense semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     places+=Place+
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
