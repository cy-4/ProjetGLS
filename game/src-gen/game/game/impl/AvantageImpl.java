/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.Avantage;
import game.game.Condition;
import game.game.ConditionAvantage;
import game.game.GamePackage;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Avantage</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.AvantageImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.AvantageImpl#getActif <em>Actif</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AvantageImpl extends ElementsJeuImpl implements Avantage
{
  /**
	 * The cached value of the '{@link #getVisible() <em>Visible</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getVisible()
	 * @generated
	 * @ordered
	 */
  protected EList<ConditionAvantage> visible;

  /**
	 * The cached value of the '{@link #getActif() <em>Actif</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getActif()
	 * @generated
	 * @ordered
	 */
  protected EList<ConditionAvantage> actif;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AvantageImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return GamePackage.Literals.AVANTAGE;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<ConditionAvantage> getVisible()
  {
		if (visible == null) {
			visible = new EObjectContainmentWithInverseEList<ConditionAvantage>(ConditionAvantage.class, this, GamePackage.AVANTAGE__VISIBLE, GamePackage.CONDITION_AVANTAGE__VISIBLE);
		}
		return visible;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<ConditionAvantage> getActif()
  {
		if (actif == null) {
			actif = new EObjectContainmentWithInverseEList<ConditionAvantage>(ConditionAvantage.class, this, GamePackage.AVANTAGE__ACTIF, GamePackage.CONDITION_AVANTAGE__ACTIF);
		}
		return actif;
	}

  /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getVisible()).basicAdd(otherEnd, msgs);
			case GamePackage.AVANTAGE__ACTIF:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getActif()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

		/**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				return ((InternalEList<?>)getVisible()).basicRemove(otherEnd, msgs);
			case GamePackage.AVANTAGE__ACTIF:
				return ((InternalEList<?>)getActif()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				return getVisible();
			case GamePackage.AVANTAGE__ACTIF:
				return getActif();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
		@Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				getVisible().clear();
				getVisible().addAll((Collection<? extends ConditionAvantage>)newValue);
				return;
			case GamePackage.AVANTAGE__ACTIF:
				getActif().clear();
				getActif().addAll((Collection<? extends ConditionAvantage>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				getVisible().clear();
				return;
			case GamePackage.AVANTAGE__ACTIF:
				getActif().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case GamePackage.AVANTAGE__VISIBLE:
				return visible != null && !visible.isEmpty();
			case GamePackage.AVANTAGE__ACTIF:
				return actif != null && !actif.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //AvantageImpl
