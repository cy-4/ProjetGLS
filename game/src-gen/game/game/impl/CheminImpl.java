/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.Chemin;
import game.game.Condition;
import game.game.ConditionChemin;
import game.game.GamePackage;
import game.game.Lieu;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.CheminImpl#getPred <em>Pred</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#getSucc <em>Succ</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#isObligatoire <em>Obligatoire</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#getOuvert <em>Ouvert</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends PlaceImpl implements Chemin
{
  /**
	 * The cached value of the '{@link #getPred() <em>Pred</em>}' reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPred()
	 * @generated
	 * @ordered
	 */
  protected Lieu pred;

  /**
	 * The cached value of the '{@link #getSucc() <em>Succ</em>}' reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getSucc()
	 * @generated
	 * @ordered
	 */
  protected Lieu succ;

  /**
	 * The cached value of the '{@link #getVisible() <em>Visible</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getVisible()
	 * @generated
	 * @ordered
	 */
  protected EList<ConditionChemin> visible;

  /**
	 * The default value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isObligatoire()
	 * @generated
	 * @ordered
	 */
  protected static final boolean OBLIGATOIRE_EDEFAULT = false;

  /**
	 * The cached value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isObligatoire()
	 * @generated
	 * @ordered
	 */
  protected boolean obligatoire = OBLIGATOIRE_EDEFAULT;

  /**
	 * The cached value of the '{@link #getOuvert() <em>Ouvert</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getOuvert()
	 * @generated
	 * @ordered
	 */
  protected EList<ConditionChemin> ouvert;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CheminImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return GamePackage.Literals.CHEMIN;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Lieu getPred()
  {
		if (pred != null && pred.eIsProxy()) {
			InternalEObject oldPred = (InternalEObject)pred;
			pred = (Lieu)eResolveProxy(oldPred);
			if (pred != oldPred) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__PRED, oldPred, pred));
			}
		}
		return pred;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Lieu basicGetPred()
  {
		return pred;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setPred(Lieu newPred)
  {
		Lieu oldPred = pred;
		pred = newPred;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__PRED, oldPred, pred));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Lieu getSucc()
  {
		if (succ != null && succ.eIsProxy()) {
			InternalEObject oldSucc = (InternalEObject)succ;
			succ = (Lieu)eResolveProxy(oldSucc);
			if (succ != oldSucc) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__SUCC, oldSucc, succ));
			}
		}
		return succ;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Lieu basicGetSucc()
  {
		return succ;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setSucc(Lieu newSucc)
  {
		Lieu oldSucc = succ;
		succ = newSucc;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__SUCC, oldSucc, succ));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<ConditionChemin> getVisible()
  {
		if (visible == null) {
			visible = new EObjectContainmentWithInverseEList<ConditionChemin>(ConditionChemin.class, this, GamePackage.CHEMIN__VISIBLE, GamePackage.CONDITION_CHEMIN__VISIBLE);
		}
		return visible;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isObligatoire()
  {
		return obligatoire;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setObligatoire(boolean newObligatoire)
  {
		boolean oldObligatoire = obligatoire;
		obligatoire = newObligatoire;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OBLIGATOIRE, oldObligatoire, obligatoire));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<ConditionChemin> getOuvert()
  {
		if (ouvert == null) {
			ouvert = new EObjectContainmentWithInverseEList<ConditionChemin>(ConditionChemin.class, this, GamePackage.CHEMIN__OUVERT, GamePackage.CONDITION_CHEMIN__OUVERT);
		}
		return ouvert;
	}

  /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.CHEMIN__VISIBLE:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getVisible()).basicAdd(otherEnd, msgs);
			case GamePackage.CHEMIN__OUVERT:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getOuvert()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

		/**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case GamePackage.CHEMIN__VISIBLE:
				return ((InternalEList<?>)getVisible()).basicRemove(otherEnd, msgs);
			case GamePackage.CHEMIN__OUVERT:
				return ((InternalEList<?>)getOuvert()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case GamePackage.CHEMIN__PRED:
				if (resolve) return getPred();
				return basicGetPred();
			case GamePackage.CHEMIN__SUCC:
				if (resolve) return getSucc();
				return basicGetSucc();
			case GamePackage.CHEMIN__VISIBLE:
				return getVisible();
			case GamePackage.CHEMIN__OBLIGATOIRE:
				return isObligatoire();
			case GamePackage.CHEMIN__OUVERT:
				return getOuvert();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
		@Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case GamePackage.CHEMIN__PRED:
				setPred((Lieu)newValue);
				return;
			case GamePackage.CHEMIN__SUCC:
				setSucc((Lieu)newValue);
				return;
			case GamePackage.CHEMIN__VISIBLE:
				getVisible().clear();
				getVisible().addAll((Collection<? extends ConditionChemin>)newValue);
				return;
			case GamePackage.CHEMIN__OBLIGATOIRE:
				setObligatoire((Boolean)newValue);
				return;
			case GamePackage.CHEMIN__OUVERT:
				getOuvert().clear();
				getOuvert().addAll((Collection<? extends ConditionChemin>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case GamePackage.CHEMIN__PRED:
				setPred((Lieu)null);
				return;
			case GamePackage.CHEMIN__SUCC:
				setSucc((Lieu)null);
				return;
			case GamePackage.CHEMIN__VISIBLE:
				getVisible().clear();
				return;
			case GamePackage.CHEMIN__OBLIGATOIRE:
				setObligatoire(OBLIGATOIRE_EDEFAULT);
				return;
			case GamePackage.CHEMIN__OUVERT:
				getOuvert().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case GamePackage.CHEMIN__PRED:
				return pred != null;
			case GamePackage.CHEMIN__SUCC:
				return succ != null;
			case GamePackage.CHEMIN__VISIBLE:
				return visible != null && !visible.isEmpty();
			case GamePackage.CHEMIN__OBLIGATOIRE:
				return obligatoire != OBLIGATOIRE_EDEFAULT;
			case GamePackage.CHEMIN__OUVERT:
				return ouvert != null && !ouvert.isEmpty();
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (obligatoire: ");
		result.append(obligatoire);
		result.append(')');
		return result.toString();
	}

} //CheminImpl
