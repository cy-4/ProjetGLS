/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.Chemin;
import game.game.GamePackage;
import game.game.Lieu;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.CheminImpl#getPred <em>Pred</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#getSucc <em>Succ</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#isVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#isObligatoire <em>Obligatoire</em>}</li>
 *   <li>{@link game.game.impl.CheminImpl#isOuvert <em>Ouvert</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends PlaceImpl implements Chemin
{
  /**
   * The cached value of the '{@link #getPred() <em>Pred</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPred()
   * @generated
   * @ordered
   */
  protected Lieu pred;

  /**
   * The cached value of the '{@link #getSucc() <em>Succ</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSucc()
   * @generated
   * @ordered
   */
  protected Lieu succ;

  /**
   * The default value of the '{@link #isVisible() <em>Visible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVisible()
   * @generated
   * @ordered
   */
  protected static final boolean VISIBLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVisible() <em>Visible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVisible()
   * @generated
   * @ordered
   */
  protected boolean visible = VISIBLE_EDEFAULT;

  /**
   * The default value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObligatoire()
   * @generated
   * @ordered
   */
  protected static final boolean OBLIGATOIRE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObligatoire()
   * @generated
   * @ordered
   */
  protected boolean obligatoire = OBLIGATOIRE_EDEFAULT;

  /**
   * The default value of the '{@link #isOuvert() <em>Ouvert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOuvert()
   * @generated
   * @ordered
   */
  protected static final boolean OUVERT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOuvert() <em>Ouvert</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOuvert()
   * @generated
   * @ordered
   */
  protected boolean ouvert = OUVERT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheminImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.CHEMIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getPred()
  {
    if (pred != null && pred.eIsProxy())
    {
      InternalEObject oldPred = (InternalEObject)pred;
      pred = (Lieu)eResolveProxy(oldPred);
      if (pred != oldPred)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__PRED, oldPred, pred));
      }
    }
    return pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetPred()
  {
    return pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPred(Lieu newPred)
  {
    Lieu oldPred = pred;
    pred = newPred;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__PRED, oldPred, pred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getSucc()
  {
    if (succ != null && succ.eIsProxy())
    {
      InternalEObject oldSucc = (InternalEObject)succ;
      succ = (Lieu)eResolveProxy(oldSucc);
      if (succ != oldSucc)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__SUCC, oldSucc, succ));
      }
    }
    return succ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetSucc()
  {
    return succ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSucc(Lieu newSucc)
  {
    Lieu oldSucc = succ;
    succ = newSucc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__SUCC, oldSucc, succ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isVisible()
  {
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisible(boolean newVisible)
  {
    boolean oldVisible = visible;
    visible = newVisible;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__VISIBLE, oldVisible, visible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isObligatoire()
  {
    return obligatoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObligatoire(boolean newObligatoire)
  {
    boolean oldObligatoire = obligatoire;
    obligatoire = newObligatoire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OBLIGATOIRE, oldObligatoire, obligatoire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOuvert()
  {
    return ouvert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOuvert(boolean newOuvert)
  {
    boolean oldOuvert = ouvert;
    ouvert = newOuvert;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OUVERT, oldOuvert, ouvert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__PRED:
        if (resolve) return getPred();
        return basicGetPred();
      case GamePackage.CHEMIN__SUCC:
        if (resolve) return getSucc();
        return basicGetSucc();
      case GamePackage.CHEMIN__VISIBLE:
        return isVisible();
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return isObligatoire();
      case GamePackage.CHEMIN__OUVERT:
        return isOuvert();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__PRED:
        setPred((Lieu)newValue);
        return;
      case GamePackage.CHEMIN__SUCC:
        setSucc((Lieu)newValue);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible((Boolean)newValue);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire((Boolean)newValue);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__PRED:
        setPred((Lieu)null);
        return;
      case GamePackage.CHEMIN__SUCC:
        setSucc((Lieu)null);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible(VISIBLE_EDEFAULT);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire(OBLIGATOIRE_EDEFAULT);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert(OUVERT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__PRED:
        return pred != null;
      case GamePackage.CHEMIN__SUCC:
        return succ != null;
      case GamePackage.CHEMIN__VISIBLE:
        return visible != VISIBLE_EDEFAULT;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return obligatoire != OBLIGATOIRE_EDEFAULT;
      case GamePackage.CHEMIN__OUVERT:
        return ouvert != OUVERT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (visible: ");
    result.append(visible);
    result.append(", obligatoire: ");
    result.append(obligatoire);
    result.append(", ouvert: ");
    result.append(ouvert);
    result.append(')');
    return result.toString();
  }

} //CheminImpl
