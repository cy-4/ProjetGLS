/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.ElementsJeu;
import game.game.Explorateur;
import game.game.GamePackage;
import game.game.Jeu;
import game.game.Territoire;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Jeu</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.JeuImpl#getNom <em>Nom</em>}</li>
 *   <li>{@link game.game.impl.JeuImpl#getTerritoire <em>Territoire</em>}</li>
 *   <li>{@link game.game.impl.JeuImpl#getExplorateur <em>Explorateur</em>}</li>
 *   <li>{@link game.game.impl.JeuImpl#getElementsjeu <em>Elementsjeu</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JeuImpl extends MinimalEObjectImpl.Container implements Jeu
{
  /**
   * The default value of the '{@link #getNom() <em>Nom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNom()
   * @generated
   * @ordered
   */
  protected static final String NOM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNom() <em>Nom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNom()
   * @generated
   * @ordered
   */
  protected String nom = NOM_EDEFAULT;

  /**
   * The cached value of the '{@link #getTerritoire() <em>Territoire</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerritoire()
   * @generated
   * @ordered
   */
  protected Territoire territoire;

  /**
   * The cached value of the '{@link #getExplorateur() <em>Explorateur</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExplorateur()
   * @generated
   * @ordered
   */
  protected Explorateur explorateur;

  /**
   * The cached value of the '{@link #getElementsjeu() <em>Elementsjeu</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementsjeu()
   * @generated
   * @ordered
   */
  protected EList<ElementsJeu> elementsjeu;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JeuImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.JEU;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNom()
  {
    return nom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNom(String newNom)
  {
    String oldNom = nom;
    nom = newNom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.JEU__NOM, oldNom, nom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Territoire getTerritoire()
  {
    return territoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerritoire(Territoire newTerritoire, NotificationChain msgs)
  {
    Territoire oldTerritoire = territoire;
    territoire = newTerritoire;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.JEU__TERRITOIRE, oldTerritoire, newTerritoire);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTerritoire(Territoire newTerritoire)
  {
    if (newTerritoire != territoire)
    {
      NotificationChain msgs = null;
      if (territoire != null)
        msgs = ((InternalEObject)territoire).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.JEU__TERRITOIRE, null, msgs);
      if (newTerritoire != null)
        msgs = ((InternalEObject)newTerritoire).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.JEU__TERRITOIRE, null, msgs);
      msgs = basicSetTerritoire(newTerritoire, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.JEU__TERRITOIRE, newTerritoire, newTerritoire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Explorateur getExplorateur()
  {
    return explorateur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExplorateur(Explorateur newExplorateur, NotificationChain msgs)
  {
    Explorateur oldExplorateur = explorateur;
    explorateur = newExplorateur;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.JEU__EXPLORATEUR, oldExplorateur, newExplorateur);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExplorateur(Explorateur newExplorateur)
  {
    if (newExplorateur != explorateur)
    {
      NotificationChain msgs = null;
      if (explorateur != null)
        msgs = ((InternalEObject)explorateur).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.JEU__EXPLORATEUR, null, msgs);
      if (newExplorateur != null)
        msgs = ((InternalEObject)newExplorateur).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.JEU__EXPLORATEUR, null, msgs);
      msgs = basicSetExplorateur(newExplorateur, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.JEU__EXPLORATEUR, newExplorateur, newExplorateur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ElementsJeu> getElementsjeu()
  {
    if (elementsjeu == null)
    {
      elementsjeu = new EObjectContainmentEList<ElementsJeu>(ElementsJeu.class, this, GamePackage.JEU__ELEMENTSJEU);
    }
    return elementsjeu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.JEU__TERRITOIRE:
        return basicSetTerritoire(null, msgs);
      case GamePackage.JEU__EXPLORATEUR:
        return basicSetExplorateur(null, msgs);
      case GamePackage.JEU__ELEMENTSJEU:
        return ((InternalEList<?>)getElementsjeu()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.JEU__NOM:
        return getNom();
      case GamePackage.JEU__TERRITOIRE:
        return getTerritoire();
      case GamePackage.JEU__EXPLORATEUR:
        return getExplorateur();
      case GamePackage.JEU__ELEMENTSJEU:
        return getElementsjeu();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.JEU__NOM:
        setNom((String)newValue);
        return;
      case GamePackage.JEU__TERRITOIRE:
        setTerritoire((Territoire)newValue);
        return;
      case GamePackage.JEU__EXPLORATEUR:
        setExplorateur((Explorateur)newValue);
        return;
      case GamePackage.JEU__ELEMENTSJEU:
        getElementsjeu().clear();
        getElementsjeu().addAll((Collection<? extends ElementsJeu>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.JEU__NOM:
        setNom(NOM_EDEFAULT);
        return;
      case GamePackage.JEU__TERRITOIRE:
        setTerritoire((Territoire)null);
        return;
      case GamePackage.JEU__EXPLORATEUR:
        setExplorateur((Explorateur)null);
        return;
      case GamePackage.JEU__ELEMENTSJEU:
        getElementsjeu().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.JEU__NOM:
        return NOM_EDEFAULT == null ? nom != null : !NOM_EDEFAULT.equals(nom);
      case GamePackage.JEU__TERRITOIRE:
        return territoire != null;
      case GamePackage.JEU__EXPLORATEUR:
        return explorateur != null;
      case GamePackage.JEU__ELEMENTSJEU:
        return elementsjeu != null && !elementsjeu.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nom: ");
    result.append(nom);
    result.append(')');
    return result.toString();
  }

} //JeuImpl
