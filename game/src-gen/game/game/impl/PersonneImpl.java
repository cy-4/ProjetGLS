/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.Condition;
import game.game.GamePackage;
import game.game.Interaction;
import game.game.Personne;
import game.game.Place;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Personne</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.PersonneImpl#getPlace <em>Place</em>}</li>
 *   <li>{@link game.game.impl.PersonneImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.PersonneImpl#getActif <em>Actif</em>}</li>
 *   <li>{@link game.game.impl.PersonneImpl#isObligatoire <em>Obligatoire</em>}</li>
 *   <li>{@link game.game.impl.PersonneImpl#getInteractions <em>Interactions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PersonneImpl extends ElementsJeuImpl implements Personne
{
  /**
   * The cached value of the '{@link #getPlace() <em>Place</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlace()
   * @generated
   * @ordered
   */
  protected Place place;

  /**
   * The cached value of the '{@link #getVisible() <em>Visible</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisible()
   * @generated
   * @ordered
   */
  protected Condition visible;

  /**
   * The cached value of the '{@link #getActif() <em>Actif</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActif()
   * @generated
   * @ordered
   */
  protected Condition actif;

  /**
   * The default value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObligatoire()
   * @generated
   * @ordered
   */
  protected static final boolean OBLIGATOIRE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isObligatoire() <em>Obligatoire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObligatoire()
   * @generated
   * @ordered
   */
  protected boolean obligatoire = OBLIGATOIRE_EDEFAULT;

  /**
   * The cached value of the '{@link #getInteractions() <em>Interactions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInteractions()
   * @generated
   * @ordered
   */
  protected EList<Interaction> interactions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PersonneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.PERSONNE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Place getPlace()
  {
    if (place != null && place.eIsProxy())
    {
      InternalEObject oldPlace = (InternalEObject)place;
      place = (Place)eResolveProxy(oldPlace);
      if (place != oldPlace)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.PERSONNE__PLACE, oldPlace, place));
      }
    }
    return place;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Place basicGetPlace()
  {
    return place;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlace(Place newPlace)
  {
    Place oldPlace = place;
    place = newPlace;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__PLACE, oldPlace, place));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getVisible()
  {
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVisible(Condition newVisible, NotificationChain msgs)
  {
    Condition oldVisible = visible;
    visible = newVisible;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__VISIBLE, oldVisible, newVisible);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisible(Condition newVisible)
  {
    if (newVisible != visible)
    {
      NotificationChain msgs = null;
      if (visible != null)
        msgs = ((InternalEObject)visible).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.PERSONNE__VISIBLE, null, msgs);
      if (newVisible != null)
        msgs = ((InternalEObject)newVisible).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.PERSONNE__VISIBLE, null, msgs);
      msgs = basicSetVisible(newVisible, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__VISIBLE, newVisible, newVisible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getActif()
  {
    return actif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetActif(Condition newActif, NotificationChain msgs)
  {
    Condition oldActif = actif;
    actif = newActif;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__ACTIF, oldActif, newActif);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActif(Condition newActif)
  {
    if (newActif != actif)
    {
      NotificationChain msgs = null;
      if (actif != null)
        msgs = ((InternalEObject)actif).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.PERSONNE__ACTIF, null, msgs);
      if (newActif != null)
        msgs = ((InternalEObject)newActif).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.PERSONNE__ACTIF, null, msgs);
      msgs = basicSetActif(newActif, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__ACTIF, newActif, newActif));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isObligatoire()
  {
    return obligatoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObligatoire(boolean newObligatoire)
  {
    boolean oldObligatoire = obligatoire;
    obligatoire = newObligatoire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.PERSONNE__OBLIGATOIRE, oldObligatoire, obligatoire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Interaction> getInteractions()
  {
    if (interactions == null)
    {
      interactions = new EObjectContainmentEList<Interaction>(Interaction.class, this, GamePackage.PERSONNE__INTERACTIONS);
    }
    return interactions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.PERSONNE__VISIBLE:
        return basicSetVisible(null, msgs);
      case GamePackage.PERSONNE__ACTIF:
        return basicSetActif(null, msgs);
      case GamePackage.PERSONNE__INTERACTIONS:
        return ((InternalEList<?>)getInteractions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.PERSONNE__PLACE:
        if (resolve) return getPlace();
        return basicGetPlace();
      case GamePackage.PERSONNE__VISIBLE:
        return getVisible();
      case GamePackage.PERSONNE__ACTIF:
        return getActif();
      case GamePackage.PERSONNE__OBLIGATOIRE:
        return isObligatoire();
      case GamePackage.PERSONNE__INTERACTIONS:
        return getInteractions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.PERSONNE__PLACE:
        setPlace((Place)newValue);
        return;
      case GamePackage.PERSONNE__VISIBLE:
        setVisible((Condition)newValue);
        return;
      case GamePackage.PERSONNE__ACTIF:
        setActif((Condition)newValue);
        return;
      case GamePackage.PERSONNE__OBLIGATOIRE:
        setObligatoire((Boolean)newValue);
        return;
      case GamePackage.PERSONNE__INTERACTIONS:
        getInteractions().clear();
        getInteractions().addAll((Collection<? extends Interaction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.PERSONNE__PLACE:
        setPlace((Place)null);
        return;
      case GamePackage.PERSONNE__VISIBLE:
        setVisible((Condition)null);
        return;
      case GamePackage.PERSONNE__ACTIF:
        setActif((Condition)null);
        return;
      case GamePackage.PERSONNE__OBLIGATOIRE:
        setObligatoire(OBLIGATOIRE_EDEFAULT);
        return;
      case GamePackage.PERSONNE__INTERACTIONS:
        getInteractions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.PERSONNE__PLACE:
        return place != null;
      case GamePackage.PERSONNE__VISIBLE:
        return visible != null;
      case GamePackage.PERSONNE__ACTIF:
        return actif != null;
      case GamePackage.PERSONNE__OBLIGATOIRE:
        return obligatoire != OBLIGATOIRE_EDEFAULT;
      case GamePackage.PERSONNE__INTERACTIONS:
        return interactions != null && !interactions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (obligatoire: ");
    result.append(obligatoire);
    result.append(')');
    return result.toString();
  }

} //PersonneImpl
