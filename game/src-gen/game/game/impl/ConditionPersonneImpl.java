/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.ConditionPersonne;
import game.game.GamePackage;
import game.game.Personne;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Personne</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.ConditionPersonneImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.ConditionPersonneImpl#getActive <em>Active</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionPersonneImpl extends ConditionImpl implements ConditionPersonne {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionPersonneImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return GamePackage.Literals.CONDITION_PERSONNE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Personne getVisible() {
		if (eContainerFeatureID() != GamePackage.CONDITION_PERSONNE__VISIBLE) return null;
		return (Personne)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetVisible(Personne newVisible, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newVisible, GamePackage.CONDITION_PERSONNE__VISIBLE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVisible(Personne newVisible) {
		if (newVisible != eInternalContainer() || (eContainerFeatureID() != GamePackage.CONDITION_PERSONNE__VISIBLE && newVisible != null)) {
			if (EcoreUtil.isAncestor(this, newVisible))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newVisible != null)
				msgs = ((InternalEObject)newVisible).eInverseAdd(this, GamePackage.PERSONNE__VISIBLE, Personne.class, msgs);
			msgs = basicSetVisible(newVisible, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CONDITION_PERSONNE__VISIBLE, newVisible, newVisible));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Personne getActive() {
		if (eContainerFeatureID() != GamePackage.CONDITION_PERSONNE__ACTIVE) return null;
		return (Personne)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetActive(Personne newActive, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newActive, GamePackage.CONDITION_PERSONNE__ACTIVE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setActive(Personne newActive) {
		if (newActive != eInternalContainer() || (eContainerFeatureID() != GamePackage.CONDITION_PERSONNE__ACTIVE && newActive != null)) {
			if (EcoreUtil.isAncestor(this, newActive))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newActive != null)
				msgs = ((InternalEObject)newActive).eInverseAdd(this, GamePackage.PERSONNE__ACTIVE, Personne.class, msgs);
			msgs = basicSetActive(newActive, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CONDITION_PERSONNE__ACTIVE, newActive, newActive));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetVisible((Personne)otherEnd, msgs);
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetActive((Personne)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				return basicSetVisible(null, msgs);
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				return basicSetActive(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				return eInternalContainer().eInverseRemove(this, GamePackage.PERSONNE__VISIBLE, Personne.class, msgs);
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				return eInternalContainer().eInverseRemove(this, GamePackage.PERSONNE__ACTIVE, Personne.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				return getVisible();
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				return getActive();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				setVisible((Personne)newValue);
				return;
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				setActive((Personne)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				setVisible((Personne)null);
				return;
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				setActive((Personne)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GamePackage.CONDITION_PERSONNE__VISIBLE:
				return getVisible() != null;
			case GamePackage.CONDITION_PERSONNE__ACTIVE:
				return getActive() != null;
		}
		return super.eIsSet(featureID);
	}

} //ConditionPersonneImpl
