/**
 * generated by Xtext 2.23.0
 */
package game.game.impl;

import game.game.Avantage;
import game.game.ConditionAvantage;
import game.game.GamePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Avantage</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link game.game.impl.ConditionAvantageImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link game.game.impl.ConditionAvantageImpl#getActif <em>Actif</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionAvantageImpl extends ConditionImpl implements ConditionAvantage {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionAvantageImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return GamePackage.Literals.CONDITION_AVANTAGE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Avantage getVisible() {
		if (eContainerFeatureID() != GamePackage.CONDITION_AVANTAGE__VISIBLE) return null;
		return (Avantage)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetVisible(Avantage newVisible, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newVisible, GamePackage.CONDITION_AVANTAGE__VISIBLE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVisible(Avantage newVisible) {
		if (newVisible != eInternalContainer() || (eContainerFeatureID() != GamePackage.CONDITION_AVANTAGE__VISIBLE && newVisible != null)) {
			if (EcoreUtil.isAncestor(this, newVisible))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newVisible != null)
				msgs = ((InternalEObject)newVisible).eInverseAdd(this, GamePackage.AVANTAGE__VISIBLE, Avantage.class, msgs);
			msgs = basicSetVisible(newVisible, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CONDITION_AVANTAGE__VISIBLE, newVisible, newVisible));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Avantage getActif() {
		if (eContainerFeatureID() != GamePackage.CONDITION_AVANTAGE__ACTIF) return null;
		return (Avantage)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetActif(Avantage newActif, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newActif, GamePackage.CONDITION_AVANTAGE__ACTIF, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setActif(Avantage newActif) {
		if (newActif != eInternalContainer() || (eContainerFeatureID() != GamePackage.CONDITION_AVANTAGE__ACTIF && newActif != null)) {
			if (EcoreUtil.isAncestor(this, newActif))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newActif != null)
				msgs = ((InternalEObject)newActif).eInverseAdd(this, GamePackage.AVANTAGE__ACTIF, Avantage.class, msgs);
			msgs = basicSetActif(newActif, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CONDITION_AVANTAGE__ACTIF, newActif, newActif));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetVisible((Avantage)otherEnd, msgs);
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetActif((Avantage)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				return basicSetVisible(null, msgs);
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				return basicSetActif(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				return eInternalContainer().eInverseRemove(this, GamePackage.AVANTAGE__VISIBLE, Avantage.class, msgs);
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				return eInternalContainer().eInverseRemove(this, GamePackage.AVANTAGE__ACTIF, Avantage.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				return getVisible();
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				return getActif();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				setVisible((Avantage)newValue);
				return;
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				setActif((Avantage)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				setVisible((Avantage)null);
				return;
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				setActif((Avantage)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GamePackage.CONDITION_AVANTAGE__VISIBLE:
				return getVisible() != null;
			case GamePackage.CONDITION_AVANTAGE__ACTIF:
				return getActif() != null;
		}
		return super.eIsSet(featureID);
	}

} //ConditionAvantageImpl
